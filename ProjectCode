import random
import os
import time

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def delete(self):
        if self.head is None:
            return None
        current = self.head
        prev = None
        while current.next:
            prev = current
            current = current.next
        if prev:
            prev.next = None
        else:
            self.head = None
        return current.data

    def __contains__(self, item):
        current = self.head
        while current:
            if current.data == item:
                return True
            current = current.next
        return False


WIDTH, HEIGHT = 20, 10
SNAKE_HEAD = "0"
SNAKE_BODY = "o"
FOOD = "X"
BORDER = "#"
OBSTACLE = "!"


snake = LinkedList()
snake.insert((WIDTH // 2, HEIGHT // 2))
direction = (1, 0)
food = (random.randint(0, WIDTH - 1), random.randint(0, HEIGHT - 1))
score = 0


num_obstacles = (WIDTH * HEIGHT) // 10
obstacles = []
for _ in range(num_obstacles):
    obs = (random.randint(0, WIDTH - 1), random.randint(0, HEIGHT - 1))
    if obs not in snake and obs != food:
        obstacles.append(obs)


def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')


def draw_board():
    clear_screen()
    print(BORDER * (WIDTH + 23))  

    for y in range(HEIGHT):
        print(BORDER, end=' ')
        for x in range(WIDTH):
            if (x, y) == snake.head.data:
                print(SNAKE_HEAD, end=' ')
            elif any(node.data == (x, y) for node in iterate_nodes(snake.head.next)):
                print(SNAKE_BODY, end=' ')
            elif (x, y) == food:
                print(FOOD, end=' ')
            elif (x, y) in obstacles:
                print(OBSTACLE, end=' ')  
            else:
                print(' ', end=' ')
        print(BORDER)  

    print(BORDER * (WIDTH + 23))  
    print(f"Score: {score}")


def iterate_nodes(node):
    while node:
        yield node
        node = node.next


def get_user_input():
    while True:
        key = input("Enter a direction (w/a/s/d) or 'q' to quit: ").lower()
        if key in ['w', 'a', 's', 'd', 'q']:
            return key



directions = {'w': (0, -1), 's': (0, 1), 'a': (-1, 0), 'd': (1, 0)}


while True:
    draw_board()
    user_input = get_user_input()

    if user_input == 'q':
        clear_screen()
        print("Quit the game!")
        break

    if user_input in directions:
        new_direction = directions[user_input]
        if new_direction != (-direction[0], -direction[1]):  
            direction = new_direction

    new_head = (snake.head.data[0] + direction[0], snake.head.data[1] + direction[1])

    if new_head == food:
        score += 1
        snake.insert(new_head)
        food = (random.randint(0, WIDTH - 1), random.randint(0, HEIGHT - 1))
        obstacles.append((random.randint(0, WIDTH - 1), random.randint(0, HEIGHT - 1)))  
    else:
        snake.insert(new_head)
        if new_head != food:
            snake.delete()  
            
    if (new_head[0] < 0 or new_head[0] >= WIDTH or
        new_head[1] < 0 or new_head[1] >= HEIGHT or
        any(node.data == new_head for node in iterate_nodes(snake.head.next)) or
        new_head in obstacles):
        clear_screen()
        print("Game Over!")
        print(f"Score: {score}")
        break

    time.sleep(0.1)
